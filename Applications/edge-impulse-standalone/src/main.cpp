/* Include ------------------------------------------------------------------ */
#include "config.h"
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "gpio_hal.h"
#include "timer_hal.h"
#include "uart_hal.h"
#include <stdint.h>
#include "ei_classifier_porting.h"
extern "C" {
#include "eta_bsp.h"
#include "executor_public.h"
}
extern "C" {
    #include "executor_public.h"
    void infer(const q7_t *pIn0, q7_t *pOut0);
}
#define TASK_STACK_SIZE  2048
#define APP_LED (CONFIG_APP_LED_GPIO)
/** UART used for edge impulse communication */
tUart etaUart;

#define EI_CLASSIFIER_TFLITE_INPUT_SCALE         0.003921568859368563
#define EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT     -128
#define EI_CLASSIFIER_TFLITE_OUTPUT_SCALE        0.00390625
#define EI_CLASSIFIER_TFLITE_OUTPUT_ZEROPOINT    -128
#define EI_CLASSIFIER_RAW_SAMPLE_COUNT           1024
#define EI_CLASSIFIER_LABEL_COUNT                3

static void vInferTask(void *pvParameters)
{
#if defined(EI_CLASSIFIER_COMPILED) && EI_CLASSIFIER_COMPILED == 1
    #error "This platform does not support the EON compiler. Export with EON compiler disabled."
#endif
    ei_printf("Start inference\r\n");

    while (1) {        
        float input_f[] = {
            0.6591, 0.6595, 0.6556, 0.6478, 0.6399, 0.6242, 0.5957, 0.5892, 0.6261, 0.6301, 0.6418, 0.6614, 0.7034, 0.7564, 0.7972, 0.8227, 0.8380, 0.8541, 0.8671, 0.8710, 0.8749, 0.8788, 0.8827, 0.8855, 0.8889, 0.8928, 0.8945, 0.8945, 0.8882, 0.8799, 0.8721, 0.8592, 0.6611, 0.6595, 0.6595, 0.6517, 0.6438, 0.6282, 0.6031, 0.5987, 0.6340, 0.6379, 0.6485, 0.6716, 0.7426, 0.8086, 0.8278, 0.8525, 0.8894, 0.8984, 0.8760, 0.8788, 0.8855, 0.8917, 0.8945, 0.8956, 0.8988, 0.8993, 0.9028, 0.9011, 0.8956, 0.8866, 0.8776, 0.8670, 0.6646, 0.6658, 0.6635, 0.6556, 0.6478, 0.6333, 0.6035, 0.5999, 0.6391, 0.6446, 0.6693, 0.6963, 0.6235, 0.5087, 0.4469, 0.4684, 0.5597, 0.7249, 0.8910, 0.9085, 0.8905, 0.8984, 0.9023, 0.9032, 0.9018, 0.9053, 0.9092, 0.9048, 0.8984, 0.8866, 0.8788, 0.8670, 0.6674, 0.6674, 0.6674, 0.6595, 0.6478, 0.6360, 0.6109, 0.6065, 0.6457, 0.6654, 0.6367, 0.4107, 0.2383, 0.1756, 0.1767, 0.1873, 0.2065, 0.2822, 0.4974, 0.8322, 0.9141, 0.8945, 0.9032, 0.9018, 0.9053, 0.9053, 0.9053, 0.9048, 0.8993, 0.8889, 0.8788, 0.8670, 0.6674, 0.6674, 0.6674, 0.6630, 0.6517, 0.6381, 0.6148, 0.6105, 0.6654, 0.6328, 0.3461, 0.1956, 0.1795, 0.1677, 0.1564, 0.1560, 0.1677, 0.1987, 0.2469, 0.4543, 0.8421, 0.9083, 0.8974, 0.8990, 0.9018, 0.9053, 0.9053, 0.9025, 0.8974, 0.8852, 0.8753, 0.8652, 0.6678, 0.6690, 0.6674, 0.6635, 0.6517, 0.6427, 0.6132, 0.6183, 0.6732, 0.4248, 0.2187, 0.1689, 0.1329, 0.1255, 0.1110, 0.1121, 0.1172, 0.1285, 0.1913, 0.2817, 0.5759, 0.9092, 0.8974, 0.9013, 0.9053, 0.9057, 0.9080, 0.9036, 0.8958, 0.8806, 0.8711, 0.8605, 0.6724, 0.6736, 0.6674, 0.6635, 0.6517, 0.6438, 0.6136, 0.6375, 0.5968, 0.2709, 0.2579, 0.2466, 0.1109, 0.0969, 0.0929, 0.0890, 0.0890, 0.0893, 0.1207, 0.2187, 0.3947, 0.8072, 0.9210, 0.9018, 0.9050, 0.9050, 0.9050, 0.9017, 0.8935, 0.8789, 0.8656, 0.8554, 0.6717, 0.6708, 0.6674, 0.6635, 0.6517, 0.6399, 0.6097, 0.6508, 0.5091, 0.2030, 0.2662, 0.4360, 0.1936, 0.0678, 0.0768, 0.0690, 0.0667, 0.0627, 0.0932, 0.1756, 0.2971, 0.6893, 0.9285, 0.8971, 0.9050, 0.9050, 0.9050, 0.8971, 0.8854, 0.8732, 0.8610, 0.8480, 0.6710, 0.6705, 0.6643, 0.6588, 0.6517, 0.6399, 0.6097, 0.6492, 0.4687, 0.1862, 0.2254, 0.4989, 0.4319, 0.0790, 0.0643, 0.0581, 0.0533, 0.0454, 0.0745, 0.1603, 0.2540, 0.6069, 0.9124, 0.8928, 0.8971, 0.9011, 0.8994, 0.8932, 0.8815, 0.8658, 0.8540, 0.8383, 0.6710, 0.6675, 0.6659, 0.6576, 0.6512, 0.6365, 0.6086, 0.6508, 0.4816, 0.1795, 0.2101, 0.4700, 0.6038, 0.1758, 0.0463, 0.0447, 0.0403, 0.0364, 0.0690, 0.1569, 0.2427, 0.5721, 0.8976, 0.8819, 0.8925, 0.8964, 0.8944, 0.8877, 0.8771, 0.8579, 0.8344, 0.8226, 0.6710, 0.6671, 0.6631, 0.6592, 0.6463, 0.6360, 0.6046, 0.6531, 0.5451, 0.2026, 0.1717, 0.3601, 0.6518, 0.3599, 0.0714, 0.0812, 0.0376, 0.0219, 0.0717, 0.1675, 0.2466, 0.6062, 0.9003, 0.8756, 0.8835, 0.8902, 0.8874, 0.8814, 0.8681, 0.8422, 0.8226, 0.8069, 0.6710, 0.6671, 0.6631, 0.6592, 0.6447, 0.6321, 0.6023, 0.6383, 0.6333, 0.2771, 0.1590, 0.2160, 0.4646, 0.4348, 0.1494, 0.2212, 0.0948, 0.0000, 0.0879, 0.1843, 0.2816, 0.7031, 0.9031, 0.8717, 0.8756, 0.8796, 0.8796, 0.8717, 0.8572, 0.8314, 0.8113, 0.7913, 0.6698, 0.6671, 0.6631, 0.6553, 0.6447, 0.6321, 0.6023, 0.6305, 0.6889, 0.4377, 0.1717, 0.1445, 0.1858, 0.1525, 0.0671, 0.2875, 0.2122, 0.0653, 0.0927, 0.1988, 0.4059, 0.8286, 0.8796, 0.8717, 0.8729, 0.8694, 0.8717, 0.8639, 0.8454, 0.8235, 0.8000, 0.7795, 0.6671, 0.6671, 0.6631, 0.6553, 0.6401, 0.6279, 0.5991, 0.6328, 0.6794, 0.6321, 0.3131, 0.1458, 0.1101, 0.0595, 0.1558, 0.4862, 0.3094, 0.2053, 0.1307, 0.2952, 0.6710, 0.8855, 0.8705, 0.8745, 0.8671, 0.8592, 0.8600, 0.8521, 0.8353, 0.8101, 0.7882, 0.7670, 0.6671, 0.6671, 0.6631, 0.6553, 0.6396, 0.6246, 0.5968, 0.6356, 0.6669, 0.6791, 0.5944, 0.2974, 0.1587, 0.0858, 0.0912, 0.3189, 0.1455, 0.1647, 0.3027, 0.6114, 0.8589, 0.8652, 0.8742, 0.8742, 0.8624, 0.8546, 0.8502, 0.8443, 0.8247, 0.7988, 0.7765, 0.7569, 0.6670, 0.6670, 0.6620, 0.6514, 0.6424, 0.6239, 0.5991, 0.6411, 0.6713, 0.6595, 0.6831, 0.6376, 0.4393, 0.2681, 0.1486, 0.1475, 0.0895, 0.2722, 0.6980, 0.8511, 0.8585, 0.8663, 0.8758, 0.8742, 0.8569, 0.8507, 0.8467, 0.8389, 0.8196, 0.7910, 0.7725, 0.7525, 0.6670, 0.6658, 0.6603, 0.6514, 0.6396, 0.6239, 0.5972, 0.6438, 0.6748, 0.6674, 0.6685, 0.6987, 0.7482, 0.7421, 0.5530, 0.4472, 0.4921, 0.7459, 0.8781, 0.8541, 0.8663, 0.8781, 0.8860, 0.8703, 0.8546, 0.8428, 0.8424, 0.8299, 0.8099, 0.7866, 0.7686, 0.7442, 0.6670, 0.6631, 0.6608, 0.6514, 0.6396, 0.6239, 0.5956, 0.6478, 0.6752, 0.6713, 0.6752, 0.6941, 0.7397, 0.7943, 0.5261, 0.5906, 0.6813, 0.7891, 0.8714, 0.8663, 0.8781, 0.8860, 0.8938, 0.8820, 0.8663, 0.8518, 0.8456, 0.8306, 0.8090, 0.7843, 0.7608, 0.7324, 0.6631, 0.6615, 0.6552, 0.6479, 0.6373, 0.6200, 0.5910, 0.6478, 0.6713, 0.6729, 0.6800, 0.7023, 0.7436, 0.8051, 0.5892, 0.5515, 0.6488, 0.8071, 0.8977, 0.8820, 0.8899, 0.8942, 0.8982, 0.8965, 0.8820, 0.8703, 0.8589, 0.8475, 0.8242, 0.7972, 0.7649, 0.7324, 0.6631, 0.6615, 0.6557, 0.6467, 0.6369, 0.6161, 0.5882, 0.6450, 0.6713, 0.6745, 0.6867, 0.7074, 0.7519, 0.7987, 0.3192, 0.1400, 0.4910, 0.8899, 0.9016, 0.9016, 0.9056, 0.9053, 0.9154, 0.9151, 0.9048, 0.8910, 0.8781, 0.8655, 0.8443, 0.8085, 0.7779, 0.7516, 0.6612, 0.6605, 0.6527, 0.6451, 0.6357, 0.6149, 0.5870, 0.6450, 0.6690, 0.6710, 0.6839, 0.7090, 0.7597, 0.7857, 0.2754, 0.4004, 0.4659, 0.9212, 0.8973, 0.9095, 0.9099, 0.9069, 0.9214, 0.9253, 0.9233, 0.9130, 0.8982, 0.8855, 0.8588, 0.8242, 0.7979, 0.7712, 0.6582, 0.6547, 0.6504, 0.6455, 0.6333, 0.6082, 0.5820, 0.6466, 0.6666, 0.6671, 0.6788, 0.7055, 0.7742, 0.6830, 0.1577, 0.6274, 0.5001, 0.9139, 0.8947, 0.9115, 0.9112, 0.9057, 0.9209, 0.9292, 0.9230, 0.9217, 0.9173, 0.9016, 0.8784, 0.8403, 0.8171, 0.7896, 0.6543, 0.6504, 0.6464, 0.6398, 0.6290, 0.6043, 0.5803, 0.6454, 0.6627, 0.6643, 0.6721, 0.6949, 0.7864, 0.5580, 0.2099, 0.7644, 0.4631, 0.8610, 0.9073, 0.9057, 0.9084, 0.9057, 0.9175, 0.9292, 0.9253, 0.9210, 0.9134, 0.9079, 0.8929, 0.8556, 0.8355, 0.8109, 0.6464, 0.6464, 0.6430, 0.6347, 0.6239, 0.5992, 0.5803, 0.6477, 0.6569, 0.6553, 0.6643, 0.6887, 0.7689, 0.4369, 0.3231, 0.8075, 0.3985, 0.7590, 0.9140, 0.8939, 0.8978, 0.8978, 0.9096, 0.9214, 0.9253, 0.9202, 0.9104, 0.9051, 0.8929, 0.8639, 0.8450, 0.8249, 0.6464, 0.6425, 0.6386, 0.6308, 0.6151, 0.5946, 0.5769, 0.6474, 0.6530, 0.6474, 0.6474, 0.6926, 0.7073, 0.4016, 0.3977, 0.8271, 0.3780, 0.5888, 0.9331, 0.8743, 0.8782, 0.8861, 0.8978, 0.9112, 0.9209, 0.9175, 0.9108, 0.9048, 0.8933, 0.8666, 0.8450, 0.8316, 0.6386, 0.6386, 0.6386, 0.6268, 0.6151, 0.5914, 0.5808, 0.6514, 0.6514, 0.6419, 0.6396, 0.7087, 0.6053, 0.4173, 0.4526, 0.8428, 0.4664, 0.4393, 0.9398, 0.8653, 0.8665, 0.8782, 0.8962, 0.9018, 0.9073, 0.9119, 0.9080, 0.9002, 0.8977, 0.8682, 0.8426, 0.8300, 0.6386, 0.6386, 0.6347, 0.6268, 0.6111, 0.5902, 0.5843, 0.6553, 0.6514, 0.6384, 0.6356, 0.7240, 0.5223, 0.5024, 0.4526, 0.8997, 0.6296, 0.3515, 0.8861, 0.8782, 0.8625, 0.8782, 0.8939, 0.8955, 0.8987, 0.9073, 0.9041, 0.8983, 0.9009, 0.8742, 0.8442, 0.8265, 0.6386, 0.6386, 0.6347, 0.6268, 0.6111, 0.5891, 0.5820, 0.6553, 0.6514, 0.6384, 0.6396, 0.7212, 0.4132, 0.4720, 0.3510, 0.6323, 0.5906, 0.3354, 0.8061, 0.8978, 0.8621, 0.8743, 0.8939, 0.8925, 0.9004, 0.9043, 0.9022, 0.9057, 0.9069, 0.8786, 0.8541, 0.8336, 0.6374, 0.6386, 0.6347, 0.6229, 0.6111, 0.5844, 0.5847, 0.6553, 0.6474, 0.6384, 0.6490, 0.6778, 0.3791, 0.5091, 0.4037, 0.6521, 0.5800, 0.4095, 0.6661, 0.9257, 0.8630, 0.8782, 0.8955, 0.8925, 0.8964, 0.9008, 0.9038, 0.9096, 0.9124, 0.8818, 0.8581, 0.8380, 0.6358, 0.6335, 0.6285, 0.6225, 0.6072, 0.5840, 0.5808, 0.6553, 0.6474, 0.6345, 0.6670, 0.5821, 0.4403, 0.7019, 0.3425, 0.9202, 0.7164, 0.5646, 0.5127, 0.9375, 0.8625, 0.8799, 0.8964, 0.8925, 0.8886, 0.8964, 0.9038, 0.9096, 0.9135, 0.8845, 0.8624, 0.8419, 0.6319, 0.6291, 0.6264, 0.6190, 0.6072, 0.5828, 0.5780, 0.6514, 0.6435, 0.6294, 0.6827, 0.4840, 0.5059, 0.6579, 0.3566, 0.8829, 0.6469, 0.7097, 0.4131, 0.8759, 0.8708, 0.8782, 0.8925, 0.8886, 0.8824, 0.8921, 0.8995, 0.9096, 0.9096, 0.8810, 0.8645, 0.8428, 0.6229, 0.6229, 0.6190, 0.6151, 0.6033, 0.5750, 0.5803, 0.6474, 0.6396, 0.6290, 0.6717, 0.3904, 0.6254, 0.5984, 0.5118, 0.9143, 0.6313, 0.8038, 0.4029, 0.7717, 0.8900, 0.8704, 0.8826, 0.8826, 0.8748, 0.8782, 0.8939, 0.9018, 0.9006, 0.8783, 0.8610, 0.8433
        };
        int8_t input[EI_CLASSIFIER_RAW_SAMPLE_COUNT];
        int8_t output[EI_CLASSIFIER_LABEL_COUNT];
        for (size_t ix = 0; ix < EI_CLASSIFIER_RAW_SAMPLE_COUNT; ix++) {
            float f = input_f[ix];
            input[ix] = static_cast<int8_t>(round(f / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
        }        
        infer(input, output);
        ei_printf("Output:\n");
        for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
            int8_t v_in = output[ix];
            float v = static_cast<float>(v_in - EI_CLASSIFIER_TFLITE_OUTPUT_ZEROPOINT) * EI_CLASSIFIER_TFLITE_OUTPUT_SCALE;
            ei_printf("%u: %f %d\n", ix, v, output[ix]);
        }
        // And wait 5 seconds
        EtaCspRtcTmrDelayMs(5000);
    }
}
int main(void)
{
    EtaCspTimerDelayMs(2000);
    EtaCspUartInit(&etaUart, (tUartNum)CONFIG_DEBUG_UART, eUartBaud115200, eUartFlowControlNone);
    EtaCspTimerDelayMs(500);
// #if (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TENSAIFLOW)
	ExecInit();
// #endif
	xTaskCreate(vInferTask, "Executor_Compiler_Test", TASK_STACK_SIZE,
                NULL, tskIDLE_PRIORITY + 3, NULL);
    	/* Start the scheduler. */
	vTaskStartScheduler();
}